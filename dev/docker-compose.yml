services:
  postgresdb:
    image: postgres:15.2-bullseye
    container_name: zf_postgresdb
    ports:
      - 127.0.0.1:5432:5432
    volumes:
      - pg_data_zimfarm:/var/lib/postgresql/data
      - ./postgres-initdb:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=zimfarm
      - POSTGRES_USER=zimfarm
      - POSTGRES_PASSWORD=zimpass
  backend:
    build: ../dispatcher/backend
    container_name: zf_backend
    command: python main.py
    volumes:
      - ../dispatcher/backend/src:/app
      - ../dispatcher/backend/prestart.sh:/app/prestart.sh
      - ../dispatcher/backend/docs:/app/docs
      - ../dispatcher/backend/maint-scripts:/app/maint-scripts
    ports:
      - 127.0.0.1:8000:8000
    environment:
      BINDING_HOST: 0.0.0.0
      DEBUG: 1
      JWT_SECRET: DH8kSxcflUVfNRdkEiJJCn2dOOKI3qfw
      POSTGRES_URI: postgresql+psycopg://zimfarm:zimpass@postgresdb:5432/zimfarm
      ALEMBIC_UPGRADE_HEAD_ON_START: "1"
      # upload artifacts, logs and zim to receiver for simplicity
      ARTIFACTS_UPLOAD_URI: sftp://uploader@receiver:22/logs/ # reusing logs dir, kind of a hack
      LOGS_UPLOAD_URI: sftp://uploader@receiver:22/logs/
      ZIM_UPLOAD_URI: sftp://uploader@receiver:22/zim/
      ZIMCHECK_OPTION: --all
    depends_on:
      - postgresdb
  frontend-ui:
    build: ../dispatcher/frontend-ui
    container_name: zf_frontend-ui
    volumes:
      - ../dispatcher/frontend-ui/src:/app
    ports:
      - 127.0.0.1:8001:80
    environment:
      ZIMFARM_WEBAPI: http://localhost:8000/v1
    depends_on:
      - backend
  frontend-ui-dev:
    build:
      dockerfile: ../../dev/frontend-ui-dev/Dockerfile
      context: ../dispatcher/frontend-ui
    container_name: zf_frontend-ui-dev
    volumes:
      - ../dispatcher/frontend-ui/src:/app/src
    ports:
      - 127.0.0.1:8002:80
    environment:
      ZIMFARM_WEBAPI: http://localhost:8000/v1
    depends_on:
      - backend
  backend-tools:
    build:
      dockerfile: ../../dev/backend-tools-tests/Dockerfile
      context: ../dispatcher/backend
    container_name: zf_backend-tools
    command: tail -f /dev/null
    volumes:
      - ../dispatcher/backend/src:/app
    environment:
      POSTGRES_URI: postgresql+psycopg://zimfarm:zimpass@postgresdb:5432/zimfarm
    depends_on:
      - postgresdb
  backend-tests:
    build:
      dockerfile: ../../dev/backend-tools-tests/Dockerfile
      context: ../dispatcher/backend
    container_name: zf_backend-tests
    command: tail -f /dev/null
    volumes:
      - ../dispatcher/backend/src:/app
    environment:
      POSTGRES_URI: postgresql+psycopg://zimfarm:zimpass@postgresdb:5432/zimtest
    depends_on:
      - postgresdb
  receiver:
    build: ../receiver
    container_name: zf_receiver
    ports:
      - 127.0.0.1:8222:22
    volumes:
      - ./receiver/create-warehouse-paths.sh:/contrib/create-warehouse-paths.sh
    environment:
      - ZIMFARM_WEBAPI=http://backend:8000/v1
    depends_on:
      - backend

  # # uncomment this only if you want to run a worker manager
  # worker_mgr:
  #   build:
  #     context: ../workers
  #     dockerfile: manager-Dockerfile
  #   container_name: zf_worker_mgr
  #   depends_on:
  #     - backend
  #   command: worker-manager --webapi-uri 'http://backend:8000/v1' --username test_worker --name test_worker
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./test_worker-identity/id_rsa:/etc/ssh/keys/zimfarm

  # # uncomment this only if you want to run a 'standalone' task worker
  # # you have to modify the <your_task_id> in the command with a real requested task
  # task_worker:
  #   build:
  #     context: ../workers
  #     dockerfile: task-Dockerfile
  #   container_name: zf_task_worker
  #   depends_on:
  #     - backend
  #   command: task-worker --webapi-uri 'http://backend:8000/v1' --username test_worker --task-id <your_task_id>
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./test_worker-identity/id_rsa:/etc/ssh/keys/zimfarm
  #   environment:
  #     - DEBUG=1
  #     - DOCKER_NETWORK=zimfarm_default

volumes:
  pg_data_zimfarm:
